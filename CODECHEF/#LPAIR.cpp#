#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cmath> 

using namespace std;
typedef long long LL;
typedef pair<LL,LL> pii;
long long *tree;
long long MAX;
void update(LL idx,LL val)
{
    while(idx<=MAX)
    {
        tree[idx] += val;
        idx += (idx & -idx);
    }
}
LL read(LL idx)
{
    LL sum = 0;
    while(idx>0)
    {
        sum += tree[idx];
        idx -= (idx & -idx);
    }
    return sum;
}

int arr[MAX],temp[MAX];
long long int invcnt;
//calculating invcnt while merging
void merge(int low1,int up1,int low2,int up2)
{
    int i=low1,j=low2,k=low1,mid=up1;

    while(i<=up1 && j<=up2)  // if anyone list exhausted
    {
        if(arr[i]<=arr[j])
            temp[k++]=arr[i++];
        else
        {
            // A[j]>A[i] and i<j(since i is in left tree)
            invcnt += (mid-i+1);
            temp[k++] = arr[j++];
        }

    }
    while(i<=up1)
        temp[k++]=arr[i++];
    while(j<=up2)
        temp[k++]=arr[j++];

    //copying
    for(int x=low1;x<k;x++)
        arr[x] = temp[x];

}
void mergesort(int low,int up) // 0-7
{
    int mid;
    if(low<up)
    {
        mid = (low+up)/2;   // 3
        mergesort(low,mid);  //0-3  => 0-1 & 2-3
        mergesort(mid+1,up); //4-7  => 4-5 & 6-7
        merge(low,mid,mid+1,up);
    }
}
vector< pair<LL,LL> > v;
int main()
{
    ios::sync_with_stdio(false);
    LL t,n,maxx,m,k,a,b,cases=0;
    LL cnt;
    t = 1;
    while(t--)
    {
        cnt = 0;
        cases++;
        v.clear();
        cin>>k;
        for(LL i=0;i<k;i++)
        {
            cin>>a>>b;
            maxx = max(maxx,b);
            v.push_back(make_pair(a,b));
        }

        tree = new long long[maxx+1];
        MAX = maxx;
        memset(tree,0,sizeof(long long)*(maxx+1));
        sort(v.begin(),v.end());
        for(LL i=0;i<v.size();i++)
        {
            //  cout<<v[i].first<<" "<<v[i].second<<endl;
            update(v[i].second,1);
            cnt += read(MAX) - read(v[i].second);
        }
        cout<<cnt<<endl;
        delete[] tree;
    }
    return 0;
}




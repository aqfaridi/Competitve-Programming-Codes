#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back
#define em push
#define all(v)                      v.begin(),v.end()	
#define uniq(v)                     sort(all(v));v.erase(unique(all(v)),v.end())
#define _ ios::sync_with_stdio(false);cin.tie(0);

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;

#define endl '\n'
#define MAX 100010
#define MOD 1000000007

class FoxAndHandleEasy {
public:
	string isPossible(string S, string T) {
		string str = "";
		int m = S.length();
		for(int i=0;i<m;i++){
			str = S.substr(0,i) + S + S.substr(i);
			if(str == T)
				return "Yes";
		}
		return "No";
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	FoxAndHandleEasy *obj;
	string answer;
	obj = new FoxAndHandleEasy();
	clock_t startTime = clock();
	answer = obj->isPossible(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "Ciel";
	p1 = "CieCiell";
	p2 = "Yes";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "Ciel";
	p1 = "FoxCiel";
	p2 = "No";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "FoxCiel";
	p1 = "FoxFoxCielCiel";
	p2 = "Yes";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "FoxCiel";
	p1 = "FoxCielCielFox";
	p2 = "No";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "Ha";
	p1 = "HaHaHaHa";
	p2 = "No";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "TheHandleCanBeVeryLong";
	p1 = "TheHandleCanBeVeryLong";
	p2 = "No";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "Long";
	p1 = "LongLong";
	p2 = "Yes";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel has a new favorite string operation that works as follows:
// She takes two copies of some string X, and inserts one copy somewhere into the other copy of the same string.
// (She can also insert it at the beginning or, equivalently, at the end.)
// This operation is called expansion of the string X.
// For example, if X = "Ciel", she can expand it to "CielCiel", "CCieliel", "CiCielel", or "CieCiell".
// 
// 
// 
// You are given two strings: S and T.
// Return "Yes" (quotes for clarity) if T can be obtained by expanding S exactly once.
// Otherwise, return "No".
// 
// DEFINITION
// Class:FoxAndHandleEasy
// Method:isPossible
// Parameters:string, string
// Returns:string
// Method signature:string isPossible(string S, string T)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -T will contain between 1 and 50 characters, inclusive.
// -Both S and T will contain uppercase and lowercase letters only ('A'-'Z' and 'a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "Ciel"
// "CieCiell"
// 
// Returns: "Yes"
// 
// She can insert "Ciel" between "Cie" and "l".
// 
// 1)
// "Ciel"
// "FoxCiel"
// 
// Returns: "No"
// 
// Each string obtained by expanding S="Ciel" has exactly 8 letters.
// 
// 2)
// "FoxCiel"
// "FoxFoxCielCiel"
// 
// Returns: "Yes"
// 
// 
// 
// 3)
// "FoxCiel"
// "FoxCielCielFox"
// 
// Returns: "No"
// 
// 
// 
// 4)
// "Ha"
// "HaHaHaHa"
// 
// Returns: "No"
// 
// 
// 
// 5)
// "TheHandleCanBeVeryLong"
// "TheHandleCanBeVeryLong"
// 
// Returns: "No"
// 
// 
// 
// 6)
// "Long"
// "LongLong"
// 
// Returns: "Yes"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
